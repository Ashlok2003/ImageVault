openapi: 3.0.3
info:
  title: Image Manager API
  description: API for a web application allowing users to register, create nested folders, upload images, and search images by name with user-specific access.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
    description: Local development server
  - url: https://image-manager-app.herokuapp.com/api
    description: Production server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the user.
        email:
          type: string
          description: The user's email address.
      required:
        - id
        - email
    Folder:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier of the folder.
        name:
          type: string
          description: The name of the folder.
        user:
          type: string
          description: The ID of the user who owns the folder.
        parentFolder:
          type: string
          description: The ID of the parent folder (null for root folders).
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the folder.
      required:
        - _id
        - name
        - user
    Image:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier of the image.
        name:
          type: string
          description: The name of the image.
        url:
          type: string
          description: The Cloudinary URL of the image.
        user:
          type: string
          description: The ID of the user who owns the image.
        folder:
          type: string
          description: The ID of the folder containing the image (null for root).
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the image.
      required:
        - _id
        - name
        - url
        - user
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message describing the issue.
        error:
          type: string
          description: Detailed error information (optional).
      required:
        - message
paths:
  /auth/signup:
    post:
      summary: Register a new user
      description: Creates a new user account with email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email address.
                  example: user@example.com
                password:
                  type: string
                  description: User's password (minimum 6 characters).
                  example: Password123
              required:
                - email
                - password
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication.
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/login:
    post:
      summary: Log in a user
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email address.
                  example: user@example.com
                password:
                  type: string
                  description: User's password.
                  example: Password123
              required:
                - email
                - password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication.
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/logout:
    post:
      summary: Log out a user
      description: Invalidates the user's session (client-side token removal).
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /folders:
    post:
      summary: Create a new folder
      description: Creates a new folder, optionally nested under a parent folder.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the folder.
                  example: MyFolder
                parentFolder:
                  type: string
                  description: ID of the parent folder (optional).
                  example: 507f1f77bcf86cd799439011
                  nullable: true
              required:
                - name
      responses:
        "201":
          description: Folder created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Folder"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get user's folders
      description: Retrieves all folders owned by the authenticated user.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of folders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Folder"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /images/upload:
    post:
      summary: Upload an image
      description: Uploads an image to Cloudinary and associates it with the user and an optional folder.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the image.
                  example: MyImage
                image:
                  type: string
                  format: binary
                  description: The image file to upload (jpg, png, jpeg).
                folder:
                  type: string
                  description: ID of the folder to store the image (optional).
                  example: 507f1f77bcf86cd799439011
                  nullable: true
              required:
                - name
                - image
      responses:
        "201":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /images:
    get:
      summary: Get user's images
      description: Retrieves all images owned by the authenticated user.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /images/search:
    get:
      summary: Search images by name
      description: Searches for images by name within the authenticated user's data.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: query
          schema:
            type: string
          required: true
          description: Search query for image names.
          example: photo
      responses:
        "200":
          description: List of matching images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
        "400":
          description: Missing search query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
security:
  - BearerAuth: []
